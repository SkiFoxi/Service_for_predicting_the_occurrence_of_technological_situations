// web/js/main.js - –ü–û–õ–ù–´–ô –ö–û–î –° –†–ï–ê–õ–¨–ù–´–ú –í–†–ï–ú–ï–ù–ï–ú

class WaterMonitoringAPI {
    constructor(baseUrl = 'http://localhost:8080/api') {
        this.baseUrl = baseUrl;
    }

    async request(endpoint, options = {}) {
        const url = `${this.baseUrl}${endpoint}`;
        console.log(`üîÑ API –∑–∞–ø—Ä–æ—Å: ${url}`);
        
        try {
            const response = await fetch(url, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });

            console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
            
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ HTTP! —Å—Ç–∞—Ç—É—Å: ${response.status}`);
            }

            const data = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã');
            return data;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ API:', error);
            throw error;
        }
    }

    async getBuildings() {
        return this.request('/buildings');
    }

    async analyzeBuilding(buildingId, days = 30) {
        return this.request(`/analysis/${buildingId}?days=${days}`);
    }

    async getRealtimeData(buildingId) {
        return this.request(`/realtime/${buildingId}`);
    }

    async startGenerator() {
        return this.request('/generator/start', { method: 'POST' });
    }

    async stopGenerator() {
        return this.request('/generator/stop', { method: 'POST' });
    }

    async getGeneratorStatus() {
        return this.request('/generator/status');
    }

    async seedTestData() {
        return this.request('/seed-data', { method: 'POST' });
    }
}

class WaterMonitoringApp {
    constructor() {
        this.api = new WaterMonitoringAPI();
        this.buildings = [];
        this.currentBuilding = null;
        this.realtimeInterval = null;
        this.realtimeChart = null;
        this.init();
    }

    async init() {
        console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
        this.setupEventListeners();
        await this.loadBuildings();
        console.log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ");
    }

    setupEventListeners() {
        console.log("üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...");
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const section = link.getAttribute('href').substring(1);
                console.log(`üì± –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª: ${section}`);
                this.showSection(section);
            });
        });

        // –ü–æ–∏—Å–∫
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.filterBuildings(e.target.value);
            });
        }

        // –ê–Ω–∞–ª–∏–∑
        const analyzeBtn = document.getElementById('analyzeBtn');
        if (analyzeBtn) {
            analyzeBtn.addEventListener('click', () => {
                console.log("üìä –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–∂–∞—Ç–∞");
                this.analyzeSelectedBuilding();
            });
        }

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const closeBtn = document.querySelector('.close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                console.log("‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞");
                this.hideModal();
            });
        }

        window.addEventListener('click', (e) => {
            if (e.target === document.getElementById('buildingModal')) {
                this.hideModal();
            }
        });

        console.log("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
    }

    async loadBuildings() {
        console.log("üè¢ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–¥–∞–Ω–∏–π...");
        const container = document.getElementById('buildingsList');
        
        try {
            if (container) {
                container.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>';
            }
            
            const buildings = await this.api.getBuildings();
            console.log("‚úÖ –ó–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", buildings);
            
            if (buildings && buildings.length > 0) {
                this.buildings = buildings;
                this.renderBuildings(buildings);
                this.populateBuildingSelect(buildings);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–¥–∞–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                if (buildings.length > 0) {
                    this.currentBuilding = buildings[0].id;
                }
            } else {
                this.showTestData();
            }
            
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
            this.showTestData();
        }
    }

    renderBuildings(buildings) {
        const container = document.getElementById('buildingsList');
        if (!container) return;
        
        if (!buildings || buildings.length === 0) {
            container.innerHTML = '<div class="loading">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–¥–∞–Ω–∏—è—Ö</div>';
            return;
        }

        console.log(`üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ ${buildings.length} –∑–¥–∞–Ω–∏–π`);
        
        container.innerHTML = buildings.map(building => `
            <div class="building-card" onclick="app.showBuildingDetails('${building.id}')">
                <h3>${this.escapeHtml(building.address)}</h3>
                <div class="address">
                    ${building.fias_id ? `–§–ò–ê–°: ${this.escapeHtml(building.fias_id)}` : ''}
                    ${building.unom_id ? ` | –£–ù–û–ú: ${this.escapeHtml(building.unom_id)}` : ''}
                </div>
                <div class="building-meta">
                    <span>–î–æ–±–∞–≤–ª–µ–Ω–æ: ${new Date(building.created_at).toLocaleDateString('ru-RU')}</span>
                </div>
            </div>
        `).join('');
    }

    populateBuildingSelect(buildings) {
        const select = document.getElementById('buildingSelect');
        if (!select) return;
        
        select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ...</option>' +
            buildings.map(b => `<option value="${b.id}">${b.address}</option>`).join('');
        
        console.log(`‚úÖ –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω ${buildings.length} –∑–¥–∞–Ω–∏—è–º–∏`);
    }

    filterBuildings(query) {
        console.log(`üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–¥–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`);
        const filtered = this.buildings.filter(building =>
            building.address.toLowerCase().includes(query.toLowerCase())
        );
        this.renderBuildings(filtered);
    }

    showBuildingDetails(buildingId) {
        console.log(`üîç –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–¥–∞–Ω–∏—è: ${buildingId}`);
        const building = this.buildings.find(b => b.id === buildingId);
        if (!building) {
            console.error("‚ùå –ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:", buildingId);
            return;
        }

        const modalContent = document.getElementById('modalContent');
        if (!modalContent) return;
        
        modalContent.innerHTML = `
            <div class="building-info">
                <h3>${this.escapeHtml(building.address)}</h3>
                <p><strong>–§–ò–ê–°:</strong> ${building.fias_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                <p><strong>–£–ù–û–ú:</strong> ${building.unom_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                <p><strong>ID:</strong> ${building.id}</p>
                <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> ${new Date(building.created_at).toLocaleString('ru-RU')}</p>
                <p><strong>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</strong> ${new Date(building.updated_at).toLocaleString('ru-RU')}</p>
            </div>
            <div class="actions" style="margin-top: 20px;">
                <button class="btn-primary" onclick="app.analyzeBuilding('${building.id}')">–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ</button>
                <button class="btn-primary" onclick="app.setRealtimeBuilding('${building.id}')" style="margin-left: 10px;">–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</button>
            </div>
        `;

        this.showModal();
    }

    setRealtimeBuilding(buildingId) {
        console.log(`üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–¥–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${buildingId}`);
        this.currentBuilding = buildingId;
        this.showSection('realtime');
        this.hideModal();
    }

    async analyzeBuilding(buildingId, days = 30) {
        console.log(`üìà –ê–Ω–∞–ª–∏–∑ –∑–¥–∞–Ω–∏—è ${buildingId} –∑–∞ ${days} –¥–Ω–µ–π`);
        try {
            const analysis = await this.api.analyzeBuilding(buildingId, days);
            this.showAnalysisResults(analysis);
            this.showSection('analysis');
            this.hideModal();
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:", error);
            this.showError('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    }

    async analyzeSelectedBuilding() {
        const buildingId = document.getElementById('buildingSelect').value;
        const days = document.getElementById('periodSelect').value;
        
        if (!buildingId) {
            this.showError('–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            return;
        }

        await this.analyzeBuilding(buildingId, days);
    }

    showAnalysisResults(analysis) {
        console.log("üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞:", analysis);
        const container = document.getElementById('analysisResults');
        if (!container) return;
        
        container.innerHTML = `
            <div class="analysis-header">
                <h3>–ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${analysis.period || '30 –¥–Ω–µ–π'}</h3>
                <div class="status ${analysis.has_anomalies || analysis.hasAnomalies ? 'has-anomalies' : 'normal'}">
                    ${analysis.has_anomalies || analysis.hasAnomalies ? '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏' : '‚úÖ –ù–æ—Ä–º–∞'}
                </div>
            </div>
            
            <div class="metrics-grid">
                <div class="metric">
                    <span>–•–í–° –≤—Å–µ–≥–æ:</span>
                    <strong>${analysis.total_cold_water || analysis.TotalColdWater || 0} –º¬≥</strong>
                </div>
                <div class="metric">
                    <span>–ì–í–° –≤—Å–µ–≥–æ:</span>
                    <strong>${analysis.total_hot_water || analysis.TotalHotWater || 0} –º¬≥</strong>
                </div>
                <div class="metric">
                    <span>–†–∞–∑–Ω–∏—Ü–∞:</span>
                    <strong class="${(analysis.difference || analysis.Difference || 0) > 0 ? 'positive' : 'negative'}">
                        ${analysis.difference || analysis.Difference || 0} –º¬≥ 
                        (${analysis.difference_percent || analysis.DifferencePercent || 0}%)
                    </strong>
                </div>
                <div class="metric">
                    <span>–ê–Ω–æ–º–∞–ª–∏–π:</span>
                    <strong>${analysis.anomaly_count || analysis.AnomalyCount || 0}</strong>
                </div>
            </div>
        `;
    }

    showSection(sectionId) {
        console.log(`üì± –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª: ${sectionId}`);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ–∫—Ü–∏–π
        this.stopRealtimeMonitoring();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        document.querySelectorAll('.section').forEach(section => {
            section.classList.remove('active');
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
        const activeSection = document.getElementById(sectionId);
        if (activeSection) {
            activeSection.classList.add('active');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === `#${sectionId}`) {
                link.classList.add('active');
            }
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –≤ —Å–µ–∫—Ü–∏—é —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if (sectionId === 'realtime') {
            setTimeout(() => {
                this.startRealtimeMonitoring();
            }, 100);
        }
    }

    // –ú–û–ù–ò–¢–û–†–ò–ù–ì –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
    startRealtimeMonitoring() {
        console.log("‚è∞ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏");
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        this.stopRealtimeMonitoring();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        this.realtimeInterval = setInterval(() => {
            this.updateRealtimeData();
        }, 3000);
        
        // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        this.updateRealtimeData();
    }

    stopRealtimeMonitoring() {
        if (this.realtimeInterval) {
            clearInterval(this.realtimeInterval);
            this.realtimeInterval = null;
            console.log("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏");
        }
    }

    async updateRealtimeData() {
        if (!this.currentBuilding && this.buildings.length > 0) {
            this.currentBuilding = this.buildings[0].id;
        }

        if (!this.currentBuilding) {
            console.log("‚ö†Ô∏è –ù–µ—Ç –∑–¥–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
            this.displayDemoRealtimeData();
            return;
        }

        try {
            const data = await this.api.getRealtimeData(this.currentBuilding);
            this.displayRealtimeData(data);
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:", error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            this.displayDemoRealtimeData();
        }
    }

    displayRealtimeData(data) {
        console.log("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:", data);
        
        // –•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞ - –ø–æ–¥–∞—á–∞
        const coldWaterIn = data.cold_water?.total_flow_rate || data.coldWaterIn || 0;
        document.getElementById('coldWaterIn').textContent = `${coldWaterIn} –º¬≥/—á`;
        
        // –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞ - –∫–∞–Ω–∞–ª 1
        const hotWaterCh1 = data.hot_water?.flow_rate_ch1 || data.hotWaterCh1 || 0;
        document.getElementById('hotWaterCh1').textContent = `${hotWaterCh1} –º¬≥/—á`;
        
        // –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞ - –∫–∞–Ω–∞–ª 2  
        const hotWaterCh2 = data.hot_water?.flow_rate_ch2 || data.hotWaterCh2 || 0;
        document.getElementById('hotWaterCh2').textContent = `${hotWaterCh2} –º¬≥/—á`;
        
        // –•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞ - –≤–æ–∑–≤—Ä–∞—Ç (–ø—Ä–∏–º–µ—Ä–Ω–æ 80% –æ—Ç –ø–æ–¥–∞—á–∏)
        const coldWaterOut = Math.round(coldWaterIn * 0.8);
        document.getElementById('coldWaterOut').textContent = `${coldWaterOut} –º¬≥/—á`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã
        this.updateTrends();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        this.updateRealtimeChart(data);
    }

    displayDemoRealtimeData() {
        console.log("üéÆ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏");
        
        // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        const coldWaterIn = 50 + Math.floor(Math.random() * 50); // 50-100
        const hotWaterCh1 = 20 + Math.floor(Math.random() * 30); // 20-50
        const hotWaterCh2 = 10 + Math.floor(Math.random() * 20); // 10-30
        const coldWaterOut = Math.round(coldWaterIn * 0.8); // 80% –æ—Ç –ø–æ–¥–∞—á–∏
    
        document.getElementById('coldWaterIn').textContent = `${coldWaterIn} –º¬≥/—á`;
        document.getElementById('coldWaterOut').textContent = `${coldWaterOut} –º¬≥/—á`;
        document.getElementById('hotWaterCh1').textContent = `${hotWaterCh1} –º¬≥/—á`;
        document.getElementById('hotWaterCh2').textContent = `${hotWaterCh2} –º¬≥/—á`;
        
        this.updateTrends();
        this.updateDemoChart(coldWaterIn, coldWaterOut, hotWaterCh1, hotWaterCh2);
    }

    updateTrends() {
        // –°–ª—É—á–∞–π–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const trends = [
            { class: 'up', text: '+' + (1 + Math.floor(Math.random() * 10)) + '%' },
            { class: 'down', text: '-' + (1 + Math.floor(Math.random() * 5)) + '%' },
            { class: 'stable', text: '0%' }
        ];
        
        const trendElements = document.querySelectorAll('.trend');
        trendElements.forEach((element, index) => {
            const trend = trends[Math.floor(Math.random() * trends.length)];
            element.className = 'trend ' + trend.class;
            element.textContent = trend.text;
        });
    }

    updateRealtimeChart(data) {
        const ctx = document.getElementById('realtimeChart');
        if (!ctx) return;
        
        const coldWaterIn = data.cold_water?.total_flow_rate || 0;
        const coldWaterOut = Math.round(coldWaterIn * 0.8);
        const hotWaterCh1 = data.hot_water?.flow_rate_ch1 || 0;
        const hotWaterCh2 = data.hot_water?.flow_rate_ch2 || 0;
        
        this.createOrUpdateChart(ctx, coldWaterIn, coldWaterOut, hotWaterCh1, hotWaterCh2);
    }

    updateDemoChart(coldWaterIn, coldWaterOut, hotWaterCh1, hotWaterCh2) {
        const ctx = document.getElementById('realtimeChart');
        if (!ctx) return;
        
        this.createOrUpdateChart(ctx, coldWaterIn, coldWaterOut, hotWaterCh1, hotWaterCh2);
    }

    createOrUpdateChart(ctx, coldWaterIn, coldWaterOut, hotWaterCh1, hotWaterCh2) {
        if (!this.realtimeChart) {
            this.realtimeChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['–•–í–° –ø–æ–¥–∞—á–∞', '–•–í–° –≤–æ–∑–≤—Ä–∞—Ç', '–ì–í–° –∫–∞–Ω–∞–ª 1', '–ì–í–° –∫–∞–Ω–∞–ª 2'],
                    datasets: [{
                        label: '–†–∞—Å—Ö–æ–¥ –≤–æ–¥—ã (–º¬≥/—á)',
                        data: [coldWaterIn, coldWaterOut, hotWaterCh1, hotWaterCh2],
                        backgroundColor: [
                            'rgba(52, 152, 219, 0.7)',
                            'rgba(41, 128, 185, 0.7)',
                            'rgba(231, 76, 60, 0.7)',
                            'rgba(192, 57, 43, 0.7)'
                        ],
                        borderColor: [
                            '#3498db',
                            '#2980b9',
                            '#e74c3c',
                            '#c0392b'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: '–¢–µ–∫—É—â–∏–π —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: '–º¬≥/—á–∞—Å'
                            }
                        }
                    }
                }
            });
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞
            this.realtimeChart.data.datasets[0].data = [coldWaterIn, coldWaterOut, hotWaterCh1, hotWaterCh2];
            this.realtimeChart.update('active');
        }
    }

    showModal() {
        const modal = document.getElementById('buildingModal');
        if (modal) {
            modal.style.display = 'block';
        }
    }

    hideModal() {
        const modal = document.getElementById('buildingModal');
        if (modal) {
            modal.style.display = 'none';
        }
    }

    showError(message) {
        console.error("‚ùå –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É:", message);
        alert(`–û—à–∏–±–∫–∞: ${message}`);
    }

    showTestData() {
        console.log("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ");
        const testBuildings = [
            {
                id: 'test-1',
                address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10',
                fias_id: 'fias-001',
                unom_id: 'unom-1001',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            },
            {
                id: 'test-2',
                address: '–≥. –ú–æ—Å–∫–≤–∞, –ø—Ä. –ú–∏—Ä–∞, –¥. 25', 
                fias_id: 'fias-002',
                unom_id: 'unom-1002',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            },
            {
                id: 'test-3',
                address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥. 15',
                fias_id: 'fias-003',
                unom_id: 'unom-1003',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            }
        ];
        
        this.buildings = testBuildings;
        this.renderBuildings(testBuildings);
        this.populateBuildingSelect(testBuildings);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–¥–∞–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if (testBuildings.length > 0) {
            this.currentBuilding = testBuildings[0].id;
        }
    }

    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
console.log("üìÑ –°–∫—Ä–∏–ø—Ç main.js –∑–∞–≥—Ä—É–∂–µ–Ω");
document.addEventListener('DOMContentLoaded', function() {
    console.log("üöÄ DOM –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...");
    window.app = new WaterMonitoringApp();
});